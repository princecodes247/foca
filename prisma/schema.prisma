datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_PRISMA_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_PRISMA_SHADOW_URL") // used for migrations
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  accounts      Account[]
  sessions      Session[]
  teams         UserTeam[]
  role          String     @default("user")
}

enum GalleryLockMode {
  NONE
  LIMITED
  PASSWORD
  BLACKLIST
  WHITELIST
}

model Gallery {
  id        String   @id @default(cuid())
  name      String?
  slug      String?  @unique
  images    Image[]
  theme     String?
  createdAt DateTime @default(now())

  lockMode  GalleryLockMode @default(NONE)
  // Security
  password  String?
  emailList String[]

  views Int @default(0)

  // domains        Domain[]
  eventDate   DateTime? // Event start date
  expDate     DateTime? // Gallery expiration date
  isPublished Boolean   @default(true)
  willExpire  Boolean   @default(true)
  Team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
}

model Image {
  id              String   @id @default(cuid())
  public_id       String?
  url             String
  order           Int      @default(1)
  isCoverImage    Boolean?
  coverImageFocus String?
  views           Int      @default(0)
  likes           Int      @default(0)
  downloads       Int      @default(0)
  isHidden        Boolean  @default(false)
  createdAt       DateTime @default(now())
  Gallery         Gallery? @relation(fields: [galleryId], references: [id])
  galleryId       String?
}

model Team {
  id         String      @id @default(cuid())
  name       String
  slug       String
  users      UserTeam[]
  gallery    Gallery[]
  // folders     Folder[]
  // domains     Domain[]
  // invitations Invitation[]
  sentEmails SentEmail[]
  brand      Brand?

  plan           String    @default("free")
  stripeId       String?   @unique // Stripe subscription / customer ID
  subscriptionId String?   @unique // Stripe subscription ID
  startsAt       DateTime? // Stripe subscription start date
  endsAt         DateTime? // Stripe subscription end date

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Invitation Invitation[]
}

model Brand {
  id          String  @id @default(cuid())
  logo        String? // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  brandColor  String? // This should be a reference to the brand color
  accentColor String? // This should be a reference to the accent color
  teamId      String  @unique
  team        Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}

model UserTeam {
  role   Role   @default(MEMBER)
  userId String
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum EmailType {
  FIRST_DAY_DOMAIN_REMINDER_EMAIL
  FIRST_DOMAIN_INVALID_EMAIL
  SECOND_DOMAIN_INVALID_EMAIL
  FIRST_TRIAL_END_REMINDER_EMAIL
  FINAL_TRIAL_END_REMINDER_EMAIL
}

model SentEmail {
  id         String    @id @default(cuid())
  type       EmailType
  recipient  String // Email address of the recipient
  marketing  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  domainSlug String? // Domain that triggered the email. This can be nullable, representing emails not triggered by domains

  @@index([teamId])
}

model Domain {
  id          String   @id @default(cuid())
  slug        String   @unique
  userId      String
  teamId      String?
  verified    Boolean  @default(false) // Whether the domain has been verified
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([teamId])
}

model Invitation {
  email     String
  expires   DateTime
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  token     String   @unique

  @@unique([email, teamId])
}

model View {
  id          String   @id @default(cuid())
  viewerEmail String? // Email of the viewer if known
  verified    Boolean  @default(false) // Whether the viewer email has been verified
  viewedAt    DateTime @default(now())
}
